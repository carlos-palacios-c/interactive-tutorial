
import { StepInfo, HighlightID } from './types';

export const STEPS: StepInfo[] = [
  {
    emoji: "🌿",
    title: "1. Working Tree (Tu carpeta de trabajo)",
    description: "Es donde tienes tus archivos, donde escribes tu código y haces cambios. Estos cambios aún no son rastreados por Git.",
    example: "Ejemplo: Abres tu proyecto y editas `index.html`.",
    commandLabel: "No se necesita un comando en este punto. ¡Solo trabaja en tus archivos!",
    command: "git add <file>",
    highlight: HighlightID.WORKING_TREE,
  },
  {
    emoji: "📥",
    title: "2. `git add` (Añadir al Staging Area)",
    description: "Usa `git add` para preparar los cambios que quieres incluir en tu próximo 'commit'. Mueve los archivos modificados desde tu 'Working Tree' al 'Staging Area'.",
    example: "Ejemplo: `git add index.html` prepara el archivo `index.html` para ser guardado.",
    commandLabel: "Comando para preparar archivos:",
    command: "git add <file> | git add .",
    highlight: HighlightID.STAGING_AREA,
  },
  {
    emoji: "💾",
    title: "3. `git commit` (Guardar en Repositorio Local)",
    description: "Usa `git commit` para guardar una instantánea permanente de los archivos del 'Staging Area' en tu repositorio local. Cada commit es un punto de guardado en tu historial.",
    example: "Ejemplo: Guardas los cambios preparados con un mensaje descriptivo.",
    commandLabel: "Comando para guardar cambios:",
    command: 'git commit -m "Agrega un nuevo título a la página"',
    highlight: HighlightID.LOCAL_REPO,
  },
  {
    emoji: "🔭",
    title: "4. `git fetch` (Consultar Cambios Remotos)",
    description: "Usa `git fetch` para descargar la información más reciente del repositorio remoto (como nuevos commits o ramas) sin integrarla a tu trabajo local. Actualiza tu 'remote-tracking ref'.",
    example: "Ejemplo: Quieres ver si alguien más ha subido cambios al servidor.",
    commandLabel: "Comando para consultar el remoto:",
    command: "git fetch",
    highlight: HighlightID.REMOTE_TRACKING_REF,
  },
  {
    emoji: "🌐",
    title: "5. `git push` (Subir al Repositorio Remoto)",
    description: "Usa `git push` para enviar tus commits locales (los que guardaste con `git commit`) al repositorio remoto, como GitHub. Esto permite que otros vean tus cambios.",
    example: "Ejemplo: Después de hacer commit, subes tus cambios para compartirlos.",
    commandLabel: "Comando para enviar cambios:",
    command: "git push origin <branch-name>",
    highlight: HighlightID.REMOTE_REPO,
  },
  {
    emoji: "🔄",
    title: "6. `git pull` (Traer y Unir Cambios Remotos)",
    description: "Usa `git pull` para traer los cambios del repositorio remoto y fusionarlos automáticamente con tu rama de trabajo local. Es una combinación de `git fetch` y `git merge`.",
    example: "Ejemplo: Actualizas tu proyecto local con los últimos cambios del servidor.",
    commandLabel: "Comando para actualizar desde el remoto:",
    command: "git pull",
    highlight: HighlightID.PULL,
  },
  {
    emoji: "🔀",
    title: "7. `git checkout` (Cambiar de Rama o Versión)",
    description: "Usa `git checkout` para navegar entre diferentes ramas o commits en tu historial. También se usa para crear nuevas ramas y empezar a trabajar en ellas.",
    example: "Ejemplo: Creas una rama para una nueva función sin afectar la rama principal.",
    commandLabel: "Comando para cambiar/crear ramas:",
    command: "git checkout -b nueva-funcionalidad",
    highlight: HighlightID.CHECKOUT,
  },
  {
    emoji: "🧬",
    title: "8. `git merge` / `rebase` (Fusionar Ramas)",
    description: "Usa `git merge` o `git rebase` para integrar los cambios de una rama en otra. Esencial para combinar el trabajo de diferentes funcionalidades o de varios colaboradores.",
    example: "Ejemplo: Una vez terminada tu 'nueva-funcionalidad', la unes a la rama principal.",
    commandLabel: "Comando para fusionar ramas:",
    command: "git merge nueva-funcionalidad",
    highlight: HighlightID.MERGE_REBASE,
  },
];
